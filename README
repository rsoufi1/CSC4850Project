# Introduction
This project is for CSC 4### (Machine Learning) in Georgia State University for Spring 2022.

# Problem 1
To solve problem 1, simply go to Problem1.py and run the code. The current solutions have the highest accuracy out of the tests I ran.

A couple lines of code are commented out for testing purposes. If you would like to conduct your own tests, first uncomment lines 272-286
`else:
  #get the data from the file
  t2 = threading.Thread(
  target=getFilledTrainingData,
  args=(
    trainingDataFileNames[index][:-4]
    + "Filled_K"
    + str(kValue)
    + ".txt",
    trainignDataFilledresults,
    index,
    ),
  )
  t2.start()
  t2.join()`

If you would like to experiment with my KNN algorithm and it's tests, please uncomment 289-299.
`t3 = threading.Thread(
   target=testingData,
   args=(
       trainignDataFilledresults,
       index,
       kValue,
       trainingDataFileNames[index][:-4],
 ),
)
t3.start()
t3.join()`

Feel free to play around with inputs however you'd like

If you want to experiment with my Naive Bayes algorithm, uncomment 302-312
`t3 = threading.Thread(
  target=testingNBayes,
  args=(
    trainignDataFilledresults,
    index,
    kValue,
    trainingDataFileNames[index][:-4],
    ),
  )
t3.start()
t3.join()`

`trainignDataFilledresults`: the data passing into the test KNN function (this should have all labels known in order to test for accuracy). This is an array where each index is a set of data
`index`: the index of `trainignDataFilledresults` that we want to use for our tests
`kValue`: the K value we are using for the 'filled' data. This does not affect the KNN algorithm 
`trainingDataFileNames`: the name we want to use for our output file. I am just using the name of the input file, the method will change it to add "Filled_K{kValue}" later on.

testAlgorithm.py is where all the testing is done. `testThis` tests KNN while `testNaiveBayes` tests Naive Bayes. 

If you want to partition the data differently so there is different amounts of training data versus testing, edit this line:
`partition = round(dataLength * 9 / 10)`
Currently, 90% of the data is used for training (hence 9 / 10). 

If you want to change the k values being tested, there is a for loop controlling which values are testing. As of now, it tests possible k-values as odd numbers 1-7. Just change this line to your liking:
`for k in range(1, 9, 2):`

# Problem 2
Problem 2 simply fills in the missing data in the files. All that needs to be done is to run it. 